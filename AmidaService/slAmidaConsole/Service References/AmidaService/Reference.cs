//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18051
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace slAmidaConsole.AmidaService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterDeviceInfo", Namespace="http://schemas.datacontract.org/2004/07/AmidaServerService")]
    public partial class RegisterDeviceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime ConnectedTimeField;
        
        private string CurrentWaferIdField;
        
        private string DeviceTypeField;
        
        private bool IsExportPendingField;
        
        private string PcNameField;
        
        private string ProbeCardIdField;
        
        private double ProgressField;
        
        private string StatusField;
        
        private System.DateTime StatusBeginTimeField;
        
        private string SubStatusField;
        
        private double TimeRemainField;
        
        private System.DateTime WarningBeginTimeField;
        
        private string WarningMessageField;
        
        private int WarningTypeField;
        
        private string eq_areaField;
        
        private string eq_commentField;
        
        private string eq_proberField;
        
        private string eq_typeField;
        
        private string lot_idField;
        
        private int tested_num_chipField;
        
        private int tested_num_waferField;
        
        private int total_num_chipField;
        
        private int total_num_waferField;
        
        private double yieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConnectedTime {
            get {
                return this.ConnectedTimeField;
            }
            set {
                if ((this.ConnectedTimeField.Equals(value) != true)) {
                    this.ConnectedTimeField = value;
                    this.RaisePropertyChanged("ConnectedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentWaferId {
            get {
                return this.CurrentWaferIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentWaferIdField, value) != true)) {
                    this.CurrentWaferIdField = value;
                    this.RaisePropertyChanged("CurrentWaferId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceTypeField, value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExportPending {
            get {
                return this.IsExportPendingField;
            }
            set {
                if ((this.IsExportPendingField.Equals(value) != true)) {
                    this.IsExportPendingField = value;
                    this.RaisePropertyChanged("IsExportPending");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PcName {
            get {
                return this.PcNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PcNameField, value) != true)) {
                    this.PcNameField = value;
                    this.RaisePropertyChanged("PcName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProbeCardId {
            get {
                return this.ProbeCardIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProbeCardIdField, value) != true)) {
                    this.ProbeCardIdField = value;
                    this.RaisePropertyChanged("ProbeCardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Progress {
            get {
                return this.ProgressField;
            }
            set {
                if ((this.ProgressField.Equals(value) != true)) {
                    this.ProgressField = value;
                    this.RaisePropertyChanged("Progress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StatusBeginTime {
            get {
                return this.StatusBeginTimeField;
            }
            set {
                if ((this.StatusBeginTimeField.Equals(value) != true)) {
                    this.StatusBeginTimeField = value;
                    this.RaisePropertyChanged("StatusBeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubStatus {
            get {
                return this.SubStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.SubStatusField, value) != true)) {
                    this.SubStatusField = value;
                    this.RaisePropertyChanged("SubStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TimeRemain {
            get {
                return this.TimeRemainField;
            }
            set {
                if ((this.TimeRemainField.Equals(value) != true)) {
                    this.TimeRemainField = value;
                    this.RaisePropertyChanged("TimeRemain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WarningBeginTime {
            get {
                return this.WarningBeginTimeField;
            }
            set {
                if ((this.WarningBeginTimeField.Equals(value) != true)) {
                    this.WarningBeginTimeField = value;
                    this.RaisePropertyChanged("WarningBeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarningMessage {
            get {
                return this.WarningMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.WarningMessageField, value) != true)) {
                    this.WarningMessageField = value;
                    this.RaisePropertyChanged("WarningMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WarningType {
            get {
                return this.WarningTypeField;
            }
            set {
                if ((this.WarningTypeField.Equals(value) != true)) {
                    this.WarningTypeField = value;
                    this.RaisePropertyChanged("WarningType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eq_area {
            get {
                return this.eq_areaField;
            }
            set {
                if ((object.ReferenceEquals(this.eq_areaField, value) != true)) {
                    this.eq_areaField = value;
                    this.RaisePropertyChanged("eq_area");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eq_comment {
            get {
                return this.eq_commentField;
            }
            set {
                if ((object.ReferenceEquals(this.eq_commentField, value) != true)) {
                    this.eq_commentField = value;
                    this.RaisePropertyChanged("eq_comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eq_prober {
            get {
                return this.eq_proberField;
            }
            set {
                if ((object.ReferenceEquals(this.eq_proberField, value) != true)) {
                    this.eq_proberField = value;
                    this.RaisePropertyChanged("eq_prober");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eq_type {
            get {
                return this.eq_typeField;
            }
            set {
                if ((object.ReferenceEquals(this.eq_typeField, value) != true)) {
                    this.eq_typeField = value;
                    this.RaisePropertyChanged("eq_type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lot_id {
            get {
                return this.lot_idField;
            }
            set {
                if ((object.ReferenceEquals(this.lot_idField, value) != true)) {
                    this.lot_idField = value;
                    this.RaisePropertyChanged("lot_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int tested_num_chip {
            get {
                return this.tested_num_chipField;
            }
            set {
                if ((this.tested_num_chipField.Equals(value) != true)) {
                    this.tested_num_chipField = value;
                    this.RaisePropertyChanged("tested_num_chip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int tested_num_wafer {
            get {
                return this.tested_num_waferField;
            }
            set {
                if ((this.tested_num_waferField.Equals(value) != true)) {
                    this.tested_num_waferField = value;
                    this.RaisePropertyChanged("tested_num_wafer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int total_num_chip {
            get {
                return this.total_num_chipField;
            }
            set {
                if ((this.total_num_chipField.Equals(value) != true)) {
                    this.total_num_chipField = value;
                    this.RaisePropertyChanged("total_num_chip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int total_num_wafer {
            get {
                return this.total_num_waferField;
            }
            set {
                if ((this.total_num_waferField.Equals(value) != true)) {
                    this.total_num_waferField = value;
                    this.RaisePropertyChanged("total_num_wafer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double yield {
            get {
                return this.yieldField;
            }
            set {
                if ((this.yieldField.Equals(value) != true)) {
                    this.yieldField = value;
                    this.RaisePropertyChanged("yield");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InportCmdType", Namespace="http://schemas.datacontract.org/2004/07/AmidaServerService")]
    public enum InportCmdType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InportFile = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AmidaService.IAmidaService", CallbackContract=typeof(slAmidaConsole.AmidaService.IAmidaServiceCallback))]
    public interface IAmidaService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/GetData", ReplyAction="http://tempuri.org/IAmidaService/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/Register", ReplyAction="http://tempuri.org/IAmidaService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string key, string DeviceType, System.AsyncCallback callback, object asyncState);
        
        void EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/SayServerHello", ReplyAction="http://tempuri.org/IAmidaService/SayServerHelloResponse")]
        System.IAsyncResult BeginSayServerHello(System.AsyncCallback callback, object asyncState);
        
        void EndSayServerHello(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/GetAllConnectionInfo", ReplyAction="http://tempuri.org/IAmidaService/GetAllConnectionInfoResponse")]
        System.IAsyncResult BeginGetAllConnectionInfo(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo> EndGetAllConnectionInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/ExportCommand", ReplyAction="http://tempuri.org/IAmidaService/ExportCommandResponse")]
        System.IAsyncResult BeginExportCommand(string PCName, string CmdType, string xml, System.AsyncCallback callback, object asyncState);
        
        void EndExportCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/Down", ReplyAction="http://tempuri.org/IAmidaService/DownResponse")]
        System.IAsyncResult BeginDown(string PCName, string UserID, string SubStatus, System.AsyncCallback callback, object asyncState);
        
        void EndDown(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/Release", ReplyAction="http://tempuri.org/IAmidaService/ReleaseResponse")]
        System.IAsyncResult BeginRelease(string PCName, string UserID, System.AsyncCallback callback, object asyncState);
        
        void EndRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAmidaService/NotifyRCP", ReplyAction="http://tempuri.org/IAmidaService/NotifyRCPResponse")]
        System.IAsyncResult BeginNotifyRCP(string PCName, string title, string text, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyRCP(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAmidaServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAmidaService/ReceivedCommand")]
        void ReceivedCommand(string xmlCmd, slAmidaConsole.AmidaService.InportCmdType cmdType, string LeadingFileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAmidaService/SayHello")]
        void SayHello(string hello);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAmidaService/NotifyConnectionChanged")]
        void NotifyConnectionChanged();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAmidaService/NotifyStatusChanged")]
        void NotifyStatusChanged(string pcname, slAmidaConsole.AmidaService.RegisterDeviceInfo info);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAmidaService/NotifyClientExported")]
        void NotifyClientExported(string PCName, string CmdType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAmidaService/NotifyClientYieldChange")]
        void NotifyClientYieldChange(string PCName, double yield, string LotId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAmidaServiceChannel : slAmidaConsole.AmidaService.IAmidaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllConnectionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllConnectionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AmidaServiceClient : System.ServiceModel.DuplexClientBase<slAmidaConsole.AmidaService.IAmidaService>, slAmidaConsole.AmidaService.IAmidaService {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginSayServerHelloDelegate;
        
        private EndOperationDelegate onEndSayServerHelloDelegate;
        
        private System.Threading.SendOrPostCallback onSayServerHelloCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllConnectionInfoDelegate;
        
        private EndOperationDelegate onEndGetAllConnectionInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllConnectionInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportCommandDelegate;
        
        private EndOperationDelegate onEndExportCommandDelegate;
        
        private System.Threading.SendOrPostCallback onExportCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownDelegate;
        
        private EndOperationDelegate onEndDownDelegate;
        
        private System.Threading.SendOrPostCallback onDownCompletedDelegate;
        
        private BeginOperationDelegate onBeginReleaseDelegate;
        
        private EndOperationDelegate onEndReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginNotifyRCPDelegate;
        
        private EndOperationDelegate onEndNotifyRCPDelegate;
        
        private System.Threading.SendOrPostCallback onNotifyRCPCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AmidaServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AmidaServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AmidaServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AmidaServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AmidaServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public AmidaServiceClient(string endpointConfigurationName) : 
                this(new AmidaServiceClientCallback(), endpointConfigurationName) {
        }
        
        private AmidaServiceClient(AmidaServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public AmidaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new AmidaServiceClientCallback(), binding, remoteAddress) {
        }
        
        private AmidaServiceClient(AmidaServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public AmidaServiceClient() : 
                this(new AmidaServiceClientCallback()) {
        }
        
        private AmidaServiceClient(AmidaServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SayServerHelloCompleted;
        
        public event System.EventHandler<GetAllConnectionInfoCompletedEventArgs> GetAllConnectionInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExportCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DownCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReleaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyRCPCompleted;
        
        public event System.EventHandler<ReceivedCommandReceivedEventArgs> ReceivedCommandReceived;
        
        public event System.EventHandler<SayHelloReceivedEventArgs> SayHelloReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyConnectionChangedReceived;
        
        public event System.EventHandler<NotifyStatusChangedReceivedEventArgs> NotifyStatusChangedReceived;
        
        public event System.EventHandler<NotifyClientExportedReceivedEventArgs> NotifyClientExportedReceived;
        
        public event System.EventHandler<NotifyClientYieldChangeReceivedEventArgs> NotifyClientYieldChangeReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string slAmidaConsole.AmidaService.IAmidaService.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int value = ((int)(inValues[0]));
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginRegister(string key, string DeviceType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(key, DeviceType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slAmidaConsole.AmidaService.IAmidaService.EndRegister(System.IAsyncResult result) {
            base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string key = ((string)(inValues[0]));
            string DeviceType = ((string)(inValues[1]));
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginRegister(key, DeviceType, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndRegister(result);
            return null;
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string key, string DeviceType) {
            this.RegisterAsync(key, DeviceType, null);
        }
        
        public void RegisterAsync(string key, string DeviceType, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        key,
                        DeviceType}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginSayServerHello(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSayServerHello(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slAmidaConsole.AmidaService.IAmidaService.EndSayServerHello(System.IAsyncResult result) {
            base.Channel.EndSayServerHello(result);
        }
        
        private System.IAsyncResult OnBeginSayServerHello(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginSayServerHello(callback, asyncState);
        }
        
        private object[] OnEndSayServerHello(System.IAsyncResult result) {
            ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndSayServerHello(result);
            return null;
        }
        
        private void OnSayServerHelloCompleted(object state) {
            if ((this.SayServerHelloCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SayServerHelloCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SayServerHelloAsync() {
            this.SayServerHelloAsync(null);
        }
        
        public void SayServerHelloAsync(object userState) {
            if ((this.onBeginSayServerHelloDelegate == null)) {
                this.onBeginSayServerHelloDelegate = new BeginOperationDelegate(this.OnBeginSayServerHello);
            }
            if ((this.onEndSayServerHelloDelegate == null)) {
                this.onEndSayServerHelloDelegate = new EndOperationDelegate(this.OnEndSayServerHello);
            }
            if ((this.onSayServerHelloCompletedDelegate == null)) {
                this.onSayServerHelloCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSayServerHelloCompleted);
            }
            base.InvokeAsync(this.onBeginSayServerHelloDelegate, null, this.onEndSayServerHelloDelegate, this.onSayServerHelloCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginGetAllConnectionInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllConnectionInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo> slAmidaConsole.AmidaService.IAmidaService.EndGetAllConnectionInfo(System.IAsyncResult result) {
            return base.Channel.EndGetAllConnectionInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetAllConnectionInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginGetAllConnectionInfo(callback, asyncState);
        }
        
        private object[] OnEndGetAllConnectionInfo(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo> retVal = ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndGetAllConnectionInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllConnectionInfoCompleted(object state) {
            if ((this.GetAllConnectionInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllConnectionInfoCompleted(this, new GetAllConnectionInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllConnectionInfoAsync() {
            this.GetAllConnectionInfoAsync(null);
        }
        
        public void GetAllConnectionInfoAsync(object userState) {
            if ((this.onBeginGetAllConnectionInfoDelegate == null)) {
                this.onBeginGetAllConnectionInfoDelegate = new BeginOperationDelegate(this.OnBeginGetAllConnectionInfo);
            }
            if ((this.onEndGetAllConnectionInfoDelegate == null)) {
                this.onEndGetAllConnectionInfoDelegate = new EndOperationDelegate(this.OnEndGetAllConnectionInfo);
            }
            if ((this.onGetAllConnectionInfoCompletedDelegate == null)) {
                this.onGetAllConnectionInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllConnectionInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllConnectionInfoDelegate, null, this.onEndGetAllConnectionInfoDelegate, this.onGetAllConnectionInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginExportCommand(string PCName, string CmdType, string xml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportCommand(PCName, CmdType, xml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slAmidaConsole.AmidaService.IAmidaService.EndExportCommand(System.IAsyncResult result) {
            base.Channel.EndExportCommand(result);
        }
        
        private System.IAsyncResult OnBeginExportCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string PCName = ((string)(inValues[0]));
            string CmdType = ((string)(inValues[1]));
            string xml = ((string)(inValues[2]));
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginExportCommand(PCName, CmdType, xml, callback, asyncState);
        }
        
        private object[] OnEndExportCommand(System.IAsyncResult result) {
            ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndExportCommand(result);
            return null;
        }
        
        private void OnExportCommandCompleted(object state) {
            if ((this.ExportCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportCommandAsync(string PCName, string CmdType, string xml) {
            this.ExportCommandAsync(PCName, CmdType, xml, null);
        }
        
        public void ExportCommandAsync(string PCName, string CmdType, string xml, object userState) {
            if ((this.onBeginExportCommandDelegate == null)) {
                this.onBeginExportCommandDelegate = new BeginOperationDelegate(this.OnBeginExportCommand);
            }
            if ((this.onEndExportCommandDelegate == null)) {
                this.onEndExportCommandDelegate = new EndOperationDelegate(this.OnEndExportCommand);
            }
            if ((this.onExportCommandCompletedDelegate == null)) {
                this.onExportCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportCommandCompleted);
            }
            base.InvokeAsync(this.onBeginExportCommandDelegate, new object[] {
                        PCName,
                        CmdType,
                        xml}, this.onEndExportCommandDelegate, this.onExportCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginDown(string PCName, string UserID, string SubStatus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDown(PCName, UserID, SubStatus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slAmidaConsole.AmidaService.IAmidaService.EndDown(System.IAsyncResult result) {
            base.Channel.EndDown(result);
        }
        
        private System.IAsyncResult OnBeginDown(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string PCName = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string SubStatus = ((string)(inValues[2]));
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginDown(PCName, UserID, SubStatus, callback, asyncState);
        }
        
        private object[] OnEndDown(System.IAsyncResult result) {
            ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndDown(result);
            return null;
        }
        
        private void OnDownCompleted(object state) {
            if ((this.DownCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownAsync(string PCName, string UserID, string SubStatus) {
            this.DownAsync(PCName, UserID, SubStatus, null);
        }
        
        public void DownAsync(string PCName, string UserID, string SubStatus, object userState) {
            if ((this.onBeginDownDelegate == null)) {
                this.onBeginDownDelegate = new BeginOperationDelegate(this.OnBeginDown);
            }
            if ((this.onEndDownDelegate == null)) {
                this.onEndDownDelegate = new EndOperationDelegate(this.OnEndDown);
            }
            if ((this.onDownCompletedDelegate == null)) {
                this.onDownCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownCompleted);
            }
            base.InvokeAsync(this.onBeginDownDelegate, new object[] {
                        PCName,
                        UserID,
                        SubStatus}, this.onEndDownDelegate, this.onDownCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginRelease(string PCName, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease(PCName, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slAmidaConsole.AmidaService.IAmidaService.EndRelease(System.IAsyncResult result) {
            base.Channel.EndRelease(result);
        }
        
        private System.IAsyncResult OnBeginRelease(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string PCName = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginRelease(PCName, UserID, callback, asyncState);
        }
        
        private object[] OnEndRelease(System.IAsyncResult result) {
            ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndRelease(result);
            return null;
        }
        
        private void OnReleaseCompleted(object state) {
            if ((this.ReleaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReleaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReleaseAsync(string PCName, string UserID) {
            this.ReleaseAsync(PCName, UserID, null);
        }
        
        public void ReleaseAsync(string PCName, string UserID, object userState) {
            if ((this.onBeginReleaseDelegate == null)) {
                this.onBeginReleaseDelegate = new BeginOperationDelegate(this.OnBeginRelease);
            }
            if ((this.onEndReleaseDelegate == null)) {
                this.onEndReleaseDelegate = new EndOperationDelegate(this.OnEndRelease);
            }
            if ((this.onReleaseCompletedDelegate == null)) {
                this.onReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginReleaseDelegate, new object[] {
                        PCName,
                        UserID}, this.onEndReleaseDelegate, this.onReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slAmidaConsole.AmidaService.IAmidaService.BeginNotifyRCP(string PCName, string title, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotifyRCP(PCName, title, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slAmidaConsole.AmidaService.IAmidaService.EndNotifyRCP(System.IAsyncResult result) {
            base.Channel.EndNotifyRCP(result);
        }
        
        private System.IAsyncResult OnBeginNotifyRCP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string PCName = ((string)(inValues[0]));
            string title = ((string)(inValues[1]));
            string text = ((string)(inValues[2]));
            return ((slAmidaConsole.AmidaService.IAmidaService)(this)).BeginNotifyRCP(PCName, title, text, callback, asyncState);
        }
        
        private object[] OnEndNotifyRCP(System.IAsyncResult result) {
            ((slAmidaConsole.AmidaService.IAmidaService)(this)).EndNotifyRCP(result);
            return null;
        }
        
        private void OnNotifyRCPCompleted(object state) {
            if ((this.NotifyRCPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotifyRCPCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotifyRCPAsync(string PCName, string title, string text) {
            this.NotifyRCPAsync(PCName, title, text, null);
        }
        
        public void NotifyRCPAsync(string PCName, string title, string text, object userState) {
            if ((this.onBeginNotifyRCPDelegate == null)) {
                this.onBeginNotifyRCPDelegate = new BeginOperationDelegate(this.OnBeginNotifyRCP);
            }
            if ((this.onEndNotifyRCPDelegate == null)) {
                this.onEndNotifyRCPDelegate = new EndOperationDelegate(this.OnEndNotifyRCP);
            }
            if ((this.onNotifyRCPCompletedDelegate == null)) {
                this.onNotifyRCPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotifyRCPCompleted);
            }
            base.InvokeAsync(this.onBeginNotifyRCPDelegate, new object[] {
                        PCName,
                        title,
                        text}, this.onEndNotifyRCPDelegate, this.onNotifyRCPCompletedDelegate, userState);
        }
        
        private void OnReceivedCommandReceived(object state) {
            if ((this.ReceivedCommandReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceivedCommandReceived(this, new ReceivedCommandReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnSayHelloReceived(object state) {
            if ((this.SayHelloReceived != null)) {
                object[] results = ((object[])(state));
                this.SayHelloReceived(this, new SayHelloReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnNotifyConnectionChangedReceived(object state) {
            if ((this.NotifyConnectionChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyConnectionChangedReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnNotifyStatusChangedReceived(object state) {
            if ((this.NotifyStatusChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyStatusChangedReceived(this, new NotifyStatusChangedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnNotifyClientExportedReceived(object state) {
            if ((this.NotifyClientExportedReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyClientExportedReceived(this, new NotifyClientExportedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnNotifyClientYieldChangeReceived(object state) {
            if ((this.NotifyClientYieldChangeReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyClientYieldChangeReceived(this, new NotifyClientYieldChangeReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((((((this.ReceivedCommandReceived != null) 
                        || (this.SayHelloReceived != null)) 
                        || (this.NotifyConnectionChangedReceived != null)) 
                        || (this.NotifyStatusChangedReceived != null)) 
                        || (this.NotifyClientExportedReceived != null)) 
                        || (this.NotifyClientYieldChangeReceived != null)))) {
                throw new System.InvalidOperationException("指定回呼 InstanceContext 後即無法使用回呼事件。請選擇指定回呼 InstanceContext，或是描述回呼事件。");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override slAmidaConsole.AmidaService.IAmidaService CreateChannel() {
            return new AmidaServiceClientChannel(this);
        }
        
        private class AmidaServiceClientCallback : object, IAmidaServiceCallback {
            
            private AmidaServiceClient proxy;
            
            public void Initialize(AmidaServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReceivedCommand(string xmlCmd, slAmidaConsole.AmidaService.InportCmdType cmdType, string LeadingFileName) {
                this.proxy.OnReceivedCommandReceived(new object[] {
                            xmlCmd,
                            cmdType,
                            LeadingFileName});
            }
            
            public void SayHello(string hello) {
                this.proxy.OnSayHelloReceived(new object[] {
                            hello});
            }
            
            public void NotifyConnectionChanged() {
                this.proxy.OnNotifyConnectionChangedReceived(new object[0]);
            }
            
            public void NotifyStatusChanged(string pcname, slAmidaConsole.AmidaService.RegisterDeviceInfo info) {
                this.proxy.OnNotifyStatusChangedReceived(new object[] {
                            pcname,
                            info});
            }
            
            public void NotifyClientExported(string PCName, string CmdType) {
                this.proxy.OnNotifyClientExportedReceived(new object[] {
                            PCName,
                            CmdType});
            }
            
            public void NotifyClientYieldChange(string PCName, double yield, string LotId) {
                this.proxy.OnNotifyClientYieldChangeReceived(new object[] {
                            PCName,
                            yield,
                            LotId});
            }
        }
        
        private class AmidaServiceClientChannel : ChannelBase<slAmidaConsole.AmidaService.IAmidaService>, slAmidaConsole.AmidaService.IAmidaService {
            
            public AmidaServiceClientChannel(System.ServiceModel.DuplexClientBase<slAmidaConsole.AmidaService.IAmidaService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("GetData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegister(string key, string DeviceType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = DeviceType;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Register", _args, result);
            }
            
            public System.IAsyncResult BeginSayServerHello(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SayServerHello", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSayServerHello(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SayServerHello", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllConnectionInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllConnectionInfo", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo> EndGetAllConnectionInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<slAmidaConsole.AmidaService.RegisterDeviceInfo>)(base.EndInvoke("GetAllConnectionInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExportCommand(string PCName, string CmdType, string xml, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = PCName;
                _args[1] = CmdType;
                _args[2] = xml;
                System.IAsyncResult _result = base.BeginInvoke("ExportCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExportCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExportCommand", _args, result);
            }
            
            public System.IAsyncResult BeginDown(string PCName, string UserID, string SubStatus, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = PCName;
                _args[1] = UserID;
                _args[2] = SubStatus;
                System.IAsyncResult _result = base.BeginInvoke("Down", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDown(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Down", _args, result);
            }
            
            public System.IAsyncResult BeginRelease(string PCName, string UserID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = PCName;
                _args[1] = UserID;
                System.IAsyncResult _result = base.BeginInvoke("Release", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRelease(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Release", _args, result);
            }
            
            public System.IAsyncResult BeginNotifyRCP(string PCName, string title, string text, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = PCName;
                _args[1] = title;
                _args[2] = text;
                System.IAsyncResult _result = base.BeginInvoke("NotifyRCP", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNotifyRCP(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NotifyRCP", _args, result);
            }
        }
    }
    
    public class ReceivedCommandReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceivedCommandReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string xmlCmd {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public slAmidaConsole.AmidaService.InportCmdType cmdType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slAmidaConsole.AmidaService.InportCmdType)(this.results[1]));
            }
        }
        
        public string LeadingFileName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    public class SayHelloReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SayHelloReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string hello {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class NotifyStatusChangedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyStatusChangedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string pcname {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public slAmidaConsole.AmidaService.RegisterDeviceInfo info {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slAmidaConsole.AmidaService.RegisterDeviceInfo)(this.results[1]));
            }
        }
    }
    
    public class NotifyClientExportedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyClientExportedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string PCName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string CmdType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class NotifyClientYieldChangeReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyClientYieldChangeReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string PCName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public double yield {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[1]));
            }
        }
        
        public string LotId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}
